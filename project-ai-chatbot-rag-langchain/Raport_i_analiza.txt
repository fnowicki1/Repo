Przeprowadzone operacje

Import dokumentów źródłowych

Aplikacja wyszukuje pliki tekstowe w katalogu data i odczytuje ich zawartość.
Treści są dzielone na mniejsze fragmenty za pomocą RecursiveCharacterTextSplitter. Parametry segmentacji:
Rozmiar segmentu: 30,000 znaków.
Nakładanie: 27,000 znaków.
Fragmenty są przechowywane w bazie wektorowej DocArrayInMemorySearch.
Uzasadnienie: Dzieląc dokumenty na segmenty, można zoptymalizować ich przeszukiwanie pod kątem semantycznej zgodności z pytaniami użytkownika.
Nakładanie jest duże, ponieważ dokumenty posiadają dużą liczbę znaków czat tracił kontekst przy niektórych pytaniach

Tworzenie systemu wyszukiwania informacji

Stworzono retriever, który wyszukuje najtrafniejsze fragmenty dokumentów na podstawie podobieństwa semantycznego (parametry: k=2, fetch_k=4).
Uzasadnienie: Korzystanie z retrievera umożliwia szybkie i trafne wyszukiwanie odpowiedzi z dużych zbiorów dokumentów.

Tworzenie łańcucha QA

Zdefiniowano szablon prompta systemowego, który:
Wymaga bazowania wyłącznie na treści dokumentów.
Nakazuje wskazywanie źródeł w odpowiedziach.
Wprowadza zasady formatowania i postępowania w przypadku braku wystarczających danych.
Zintegrowano łańcuch odpowiedzi ConversationalRetrievalChain, który łączy funkcje modelu językowego i retrievera.
Uzasadnienie: Wprowadzenie ścisłych reguł ogranicza możliwość generowania nieprecyzyjnych odpowiedzi lub treści spoza kontekstu.

Interfejs użytkownika

Aplikacja wykorzystuje elementy streamlit:
Pole tekstowe do wprowadzania pytań.
Wyświetlanie odpowiedzi wraz z historią rozmowy.
Uzasadnienie: Prosty i intuicyjny interfejs sprzyja korzystaniu z aplikacji przez użytkowników o różnym poziomie zaawansowania technicznego.

Analiza wyników

Zalety

Precyzyjne odpowiedzi: Dzięki bazowaniu wyłącznie na treści dokumentów, chatbot minimalizuje ryzyko generowania błędnych lub wymyślonych informacji.
Cytowanie źródeł: Obowiązek wskazywania źródła zwiększa wiarygodność odpowiedzi.
Modularność: Oddzielenie logiki importu dokumentów, tworzenia bazy wektorowej i przetwarzania zapytań ułatwia rozwój aplikacji.

Wady

Wysokie wymagania obliczeniowe: Duże segmenty tekstu i złożone modele mogą obciążać zasoby obliczeniowe.
Ryzyko zapominania zasad: Jeśli chatbot wprowadzi błędy (np. w przykładach postaci), należy poprawić prompt, aby bardziej szczegółowo egzekwował wytyczne.